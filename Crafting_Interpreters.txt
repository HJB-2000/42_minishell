# Single-pass compilation

A compiler has roughly two jobs. 
    |--> parse the user source code to understand what it means
    |--> take that knowledge and outputs low level instructions that produce the same simantics.

Ⅰ- many programming language split those two roles in two separete passes in the implimentation 
    |--> a parser produces an AST
    |--> a code generator traverses the AST and outputs target code.

one of the problem in the more-passes compilers is in old days computers did not have enought memory 
    to store an entire source file's AST;


Ⅱ - Parsing Tokens
    1- grammar

        expression  --> identifier
                    | grouping
                    | logical operator
                    | wildcard
                    | command builtin
                    | redirections
                    | pipes
                    | environment variables

        identifier          --> NUMBER | STRING | "..." | '...'
        grouping            --> "("expression")"
        logical operator    --> '&&' | '||'
        wildcards           --> '*...'
        redirections        --> '>>' | '<<' | '<' | '>'
        pipes               --> '|'
        environment         --> '$...' | '$?'
    
    2 - precedence : determine which expression is evaluated first in an cmd-line containing a mixture
            of different expresion. so we need some sort of precedence rules to manage this so expressions
            whith higher precedence get evaluated befor the ones with lower precedence
    3 - associativity : determines which expression is goint to be evaluated first in a series of 
            of the same expression